/*
 * This source file was generated by the Gradle 'init' task
 */
package org.example.service

import org.example.model.Token
import org.example.model.TokenType

class Lexer(private val input: String) {
    private var pos = 0
    private val length = input.length

    private fun advance() {
        pos++
    }

    private fun currentChar(): Char? = if (pos < length) input[pos] else null

    fun getNextToken(): Token? {
        while (pos < length && currentChar() == ' ') {
            advance() // Skip whitespace
        }
        return when (val char = currentChar()) {
            '+' -> { advance(); Token(TokenType.PLUS) }
            '-' -> { advance(); Token(TokenType.MINUS) }
            '*' -> { advance(); Token(TokenType.MULTIPLY) }
            '/' -> { advance(); Token(TokenType.DIVIDE) }
            '(' -> { advance(); Token(TokenType.LPAREN) }
            ')' -> { advance(); Token(TokenType.RPAREN) }
            in '0'..'9' -> numberToken()
            null -> null
            else -> throw IllegalArgumentException("Unexpected character: $char")
        }
    }

    private fun numberToken(): Token {
        val start = pos
        while (currentChar()?.isDigit() == true) advance()
        return Token(TokenType.NUMBER, input.substring(start, pos))
    }

    fun tokenize(): List<Token> =
        generateSequence { getNextToken() }.toList()
}